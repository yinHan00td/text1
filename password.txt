package can;
import java.util.Scanner;
public class PasswordManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("请输入密码：");
        String password = scanner.nextLine();

        System.out.println("请输入选择：");
        System.out.println("1.加密");
        System.out.println("2.解密");
        int choice = scanner.nextInt();

        switch (choice) {
            case 1:
                String eP = eP(password);
                System.out.println("加密后密码为：" + eP);
                break;
            case 2:
                String decryptedPassword = dP(password);
                System.out.println("解密后密码为：" + decryptedPassword);
                break;
            default:
                System.out.println("抱歉，没有这个选项");
        }

        scanner.close();
    }

    public static String eP(String password) {
        StringBuilder eP = new StringBuilder();

        // 遍历每个字符
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            // 将字符的ASCII码加上它在字符串中的位置和偏移值3
            char encryptedChar = (char) (c + i + 3);
            eP.append(encryptedChar);
        }

        // 调换第一位和最后一位的顺序
        if (eP.length() > 1) {
            char firstChar = eP.charAt(0);
            char lastChar = eP.charAt(eP.length() - 1);
            eP.setCharAt(0, lastChar);
            eP.setCharAt(eP.length() - 1, firstChar);
        }

        // 反转字符串
        eP.reverse();

        return eP.toString();
    }

    public static String dP(String eP) {
        StringBuilder dP = new StringBuilder(eP);

        // 反转字符串
        dP.reverse();

        // 调换第一位和最后一位的顺序
        if (dP.length() > 1) {
            char firstChar = dP.charAt(0);
            char lastChar = dP.charAt(dP.length() - 1);
            dP.setCharAt(0, lastChar);
            dP.setCharAt(dP.length() - 1, firstChar);
        }

        // 遍历每个字符
        for (int i = 0; i < dP.length(); i++) {
            char c = dP.charAt(i);
            // 将字符的ASCII码减去它在字符串中的位置和偏移值3
            char decryptedChar = (char) (c - i - 3);
            dP.setCharAt(i, decryptedChar);
        }

        return dP.toString();
    }
}